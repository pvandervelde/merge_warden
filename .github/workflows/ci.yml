name: Rust CI

on:
  workflow_dispatch:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - master

permissions:
  contents: read

jobs:
  calculate-version:
    name: Calculate version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          # Fetch all history for version calculation and changelog generation
          fetch-depth: 0

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2

      - name: Install cargo binstall
        uses: cargo-bins/cargo-binstall@main

      - name: Install Conventional Commits Next Version
        run: cargo install conventional_commits_next_version

      - name: Install git-cliff
        run: cargo install git-cliff

      - name: Install cargo typos
        run: cargo install typos-cli

      - name: Calculate next version
        id: calc_version
        run: |
          # Use Conventional Commits Next Version to calculate the next version
          LAST_TAG=$(git describe --tags --abbrev=0)
          LAST_COMMIT=$(git rev-parse ${LAST_TAG})

          # Debug logging
          echo "Debug: LAST_TAG = '${LAST_TAG}'"
          echo "Debug: LAST_COMMIT = '${LAST_COMMIT}'"
          echo "Debug: About to run: conventional_commits_next_version --from-version ${LAST_TAG} --calculation-mode Batch ${LAST_COMMIT}"

          NEXT_VERSION=$(conventional_commits_next_version --from-version ${LAST_TAG} --calculation-mode Batch ${LAST_COMMIT})
          echo "NEXT_VERSION=${NEXT_VERSION}" >> $GITHUB_OUTPUT
          echo "The next version is: ${NEXT_VERSION}"

      - name: Show stale release branches
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEXT_VERSION="${{ steps.calc_version.outputs.NEXT_VERSION }}"
          echo "Next calculated version: ${NEXT_VERSION}"
          # List all remote release branches
          git fetch origin 'refs/heads/release/*:refs/remotes/origin/release/*'
          for branch in $(git branch -r --list 'origin/release/*' | sed 's|origin/||'); do
            # Extract version from branch name (e.g., release/1.2.3 -> 1.2.3)
            branch_version=$(echo "$branch" | sed 's|release/||')
            echo "Found existing release branch: ${branch} (version: ${branch_version})"

            if [[ "$branch_version" != "$NEXT_VERSION" ]]; then
              echo "Branch ${branch} is stale (version ${branch_version} != ${NEXT_VERSION}). Cleaning up..."
              # Find PR associated with the stale branch
              PR_NUMBER=$(gh pr list --head "$branch" --state open --json number --jq '.[0].number // empty')
              if [[ -n "$PR_NUMBER" ]]; then
                echo "PR #${PR_NUMBER} is on stale branch ${branch}..."
              else
                echo "No open PR found for stale branch ${branch}."
              fi
              # Delete the stale remote branch
              echo "stale remote branch ${branch}..."
            fi
          done

      - name: Check if release branch already exists
        id: check_branch
        run: |
          NEXT_VERSION="${{ steps.calc_version.outputs.NEXT_VERSION }}"
          BRANCH_NAME="release/${NEXT_VERSION}"
          if git rev-parse --verify --quiet "origin/${BRANCH_NAME}"; then
            echo "Branch ${BRANCH_NAME} already exists."
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Branch ${BRANCH_NAME} does not exist."
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate Changelog Section
        id: generate_changelog
        run: |
          NEXT_VERSION="${{ steps.calc_version.outputs.NEXT_VERSION }}"
          # Generate notes for the upcoming version
          # Use the tag format decided earlier (no 'v' prefix)
          git-cliff --tag "${NEXT_VERSION}" --unreleased --strip all > release_notes.md
          echo "Generated release notes for ${NEXT_VERSION}"
          # Check if notes were actually generated (might be empty if no relevant commits)
          if [ -s release_notes.md ]; then
            echo "has_notes=true" >> $GITHUB_OUTPUT
          else
            echo "No relevant commits found for changelog."
            echo "has_notes=false" >> $GITHUB_OUTPUT
          fi

  test:
    name: unit-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Install Rust
        run: rustup update stable

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@92f69c195229fe62d58b4d697ab4bc75def98e76 # v2
        with:
          tool: cargo-llvm-cov@0.6.10

      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2

      - name: Generate code coverage
        run: cargo llvm-cov --all-features --workspace --codecov --output-path codecov.json
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          files: codecov.json
          fail_ci_if_error: true

  doc_test:
    name: doc-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Install Rust
        run: rustup update stable

      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2

      - name: Run doc-tests
        run: cargo test --doc --all-features

  # bench_test:
  #   name: bench-tests
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
  #
  #     - name: Install Rust
  #       run: rustup update stable
  #
  #     - name: Run bench-tests
  #       run: cargo test --benches

  build-function:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      with:
        fetch-depth: 0  # Fetch all history for all tags and branches

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable # v1
      with:
        target: x86_64-unknown-linux-musl
        toolchain: stable

    - name: Install cargo binstall
      uses: cargo-bins/cargo-binstall@main

    - name: Install cross
      run: cargo binstall cross --no-confirm --no-track

    - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2

    - name: Build az_handler
      run: |
        cross build --release --package az_handler --target x86_64-unknown-linux-musl --target-dir target/temp

    - name: show directories after compile
      run: |
        ls -la
        ls -la target
        ls -la target/temp
        ls -la target/temp/x86_64-unknown-linux-musl
        ls -la target/temp/x86_64-unknown-linux-musl/release

    # Build the Azure Function binary for testing
    #
    # Note: This job only builds and tests the binary compilation.
    # Configuration files are not included as they are now user-provided.
    - name: Test Azure Function binary compilation
      run: |
        mkdir -p target/func
        cp -r ./target/temp/x86_64-unknown-linux-musl/release/az_handler target/func

    - name: show directories after assemble
      run: |
        ls -la
        ls -la target
        ls -la target/func
