name: Deploy binaries

on:
  workflow_dispatch:
#  push:
#    # Only run the deploy when we do a tag push
#    tags:
#      - '[0-9]+.[0-9]+.[0-9]+'
#      - '!*-rc[0-9]+'
  release:
    types:
      - published

# Sets permissions of the GITHUB_TOKEN to allow deployment to Azure
permissions:
  contents: read
  id-token: write

jobs:
  deploy_to_azure:
    runs-on: ubuntu-latest
    environment: on-release-publish
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      with:
        ref: ${{ github.event.release.tag_name }} # Use tag from release event
        fetch-tags: true
        fetch-depth: 0  # Fetch all history for all tags and branches

    - name: Fetch all history for all tags and branches
      run: |
        git fetch --prune --tags

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable # v1
      with:
        target: x86_64-unknown-linux-musl
        toolchain: stable

    - name: Install cargo binstall
      uses: cargo-bins/cargo-binstall@main

    - name: Install cross
      run: cargo binstall cross --no-confirm --no-track

    - uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6 # v2

    - name: Build az_handler
      run: |
        cross build --release --package az_handler --target x86_64-unknown-linux-musl --target-dir target/temp

    - name: show directories after compile
      run: |
        ls -la
        ls -la target
        ls -la target/temp
        ls -la target/temp/x86_64-unknown-linux-musl
        ls -la target/temp/x86_64-unknown-linux-musl/release

    # Copy the files for the azure function into a single directory
    #
    # For the azure function we need the following directories and files in the following layout.
    # Where [D] means directory and [F] means file
    #
    # [D] <function_name>       --> <target>/<function_name>
    #     [F] function.json     --> <target>/<function_name>/function.json
    # [F] host.json             --> <target>/host.json
    # [F] az_handler               --> <target>/az_handler
    - name: Copy Azure functions configs
      run: |
        mkdir -p target/func/merge_warden
        cp -r ./target/temp/x86_64-unknown-linux-musl/release/az_handler target/func
        cp -r ./configs/az_func/merge_warden/* target/func/merge_warden
        cp -r ./configs/az_func/host.json target/func

    - name: show directories after assemble
      run: |
        ls -la
        ls -la target
        ls -la target/func
        ls -la target/func/merge_warden

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3

    - name: Azure Login
      uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5 # v2
      with:
        client-id: ${{ secrets.ARM_CLIENT_ID }}
        tenant-id: ${{ secrets.ARM_TENANT_ID }}
        subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

    - name: Terraform Init
      run: terraform init
      working-directory: ops/azure
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_USE_OIDC: true

    - name: Create GitHub App Key File
      shell: bash # Explicitly use bash for redirection
      run: |
        printf '%s\n' "${{ secrets.GH_APP_PRIVATE_KEY }}" > ${{ github.workspace }}/ops/azure/gh_app_key.pem
        if [ -f ${{ github.workspace }}/ops/azure/gh_app_key.pem ]; then
          echo "GitHub App Key File created successfully."
        else
          echo "Failed to create GitHub App Key File."
          exit 1
        fi

    - name: Terraform Apply
      working-directory: ops/azure
      run: |
        terraform apply -auto-approve
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_USE_OIDC: true
        TF_VAR_github_app_id: ${{ secrets.GH_APP_ID }}
        TF_VAR_github_app_private_key_path: "${{ github.workspace }}/ops/azure/gh_app_key.pem"
        TF_VAR_github_webhook_secret: ${{ secrets.GH_WEBHOOK_SECRET }}
        TF_VAR_meta_git_sha: ${{ github.sha }}
        TF_VAR_meta_version: ${{ github.event.release.tag_name }} # Use the release tag name

    - name: Remove GitHub App Key File
      if: always()
      run: rm ${{ github.workspace }}/ops/azure/gh_app_key.pem
      shell: bash

    # Don't use the publish profile for custom handlers
    - name: Deploy to Azure Functions
      uses: Azure/functions-action@fd80521afbba9a2a76a99ba1acc07aff8d733d11 # v1
      with:
        app-name: p-aue-tf-mergew-function
        package: ${{ github.workspace }}/target/func

  publish-cli:
    if: ${{ github.event_name }} != 'workflow_dispatch'
    name: ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: x86_64-unknown-linux-musl
            os: ubuntu-22.04
          - target: x86_64-pc-windows-msvc
            os: windows-2022
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        # No need to specify ref here, it checks out the commit associated with the release tag by default

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - uses: taiki-e/setup-cross-toolchain-action@0123528f956f923e7a476f4cc04882bc005e7c89 # v1
        with:
          target: ${{ matrix.target }}
        if: startsWith(matrix.os, 'ubuntu') && !contains(matrix.target, '-musl')

      - uses: taiki-e/install-action@92f69c195229fe62d58b4d697ab4bc75def98e76 # v2
        with:
          tool: cross
        if: contains(matrix.target, '-musl')

      - run: echo "RUSTFLAGS=${RUSTFLAGS} -C target-feature=+crt-static" >> "${GITHUB_ENV}"
        if: endsWith(matrix.target, 'windows-msvc')

      - uses: taiki-e/upload-rust-binary-action@31389c348ad0130069bed8448bf507fe8617f67f # v1
        with:
          bin: merge-warden
          target: ${{ matrix.target }}
          tar: unix
          zip: windows
          token: ${{ secrets.GITHUB_TOKEN }}
