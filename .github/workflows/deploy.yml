name: Package and Release Artifacts

on:
  workflow_dispatch:
#  push:
#    # Only run the deploy when we do a tag push
#    tags:
#      - '[0-9]+.[0-9]+.[0-9]+'
#      - '!*-rc[0-9]+'
  release:
    types:
      - published

# Sets permissions of the GITHUB_TOKEN to allow uploading release artifacts
permissions:
  contents: write

jobs:
  package-azure-function:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      with:
        ref: ${{ github.event.release.tag_name }} # Use tag from release event
        fetch-tags: true
        fetch-depth: 0  # Fetch all history for all tags and branches

    - name: Fetch all history for all tags and branches
      run: |
        git fetch --prune --tags

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable # v1
      with:
        target: x86_64-unknown-linux-musl
        toolchain: stable

    - name: Install cargo binstall
      uses: cargo-bins/cargo-binstall@main

    - name: Install cross
      run: cargo binstall cross --no-confirm --no-track

    - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2

    - name: Build az_handler
      run: |
        cross build --release --package az_handler --target x86_64-unknown-linux-musl --target-dir target/temp

    - name: show directories after compile
      run: |
        ls -la
        ls -la target
        ls -la target/temp
        ls -la target/temp/x86_64-unknown-linux-musl
        ls -la target/temp/x86_64-unknown-linux-musl/release

    # Copy the files for the azure function into a single directory
    #
    # For the azure function we need the following directories and files in the following layout.
    # Where [D] means directory and [F] means file
    #
    # [D] <function_name>       --> <target>/<function_name>
    #     [F] function.json     --> <target>/<function_name>/function.json
    # [F] host.json             --> <target>/host.json
    # [F] az_handler               --> <target>/az_handler
    - name: Package Azure Function
      run: |
        mkdir -p target/func/merge_warden
        cp -r ./target/temp/x86_64-unknown-linux-musl/release/az_handler target/func
        cp -r ./configs/az_func/merge_warden/* target/func/merge_warden
        cp -r ./configs/az_func/host.json target/func

    - name: Show packaged function structure
      run: |
        ls -la target/func
        ls -la target/func/merge_warden

    - name: Create Azure Function deployment package
      run: |
        cd target/func
        zip -r ../azure-function-package.zip .
        cd ../..
        ls -la target/azure-function-package.zip

    - name: Generate checksum for Azure Function package
      run: |
        cd target
        sha256sum azure-function-package.zip > azure-function-package.zip.sha256
        cat azure-function-package.zip.sha256

    - name: Upload Azure Function package to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: target/azure-function-package.zip
        asset_name: azure-function-package.zip
        asset_content_type: application/zip

    - name: Upload Azure Function package checksum to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: target/azure-function-package.zip.sha256
        asset_name: azure-function-package.zip.sha256
        asset_content_type: text/plain

  publish-cli:
    name: ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: x86_64-unknown-linux-musl
            os: ubuntu-22.04
          - target: x86_64-pc-windows-msvc
            os: windows-2022
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        # No need to specify ref here, it checks out the commit associated with the release tag by default

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - uses: taiki-e/setup-cross-toolchain-action@0123528f956f923e7a476f4cc04882bc005e7c89 # v1
        with:
          target: ${{ matrix.target }}
        if: startsWith(matrix.os, 'ubuntu') && !contains(matrix.target, '-musl')

      - uses: taiki-e/install-action@92f69c195229fe62d58b4d697ab4bc75def98e76 # v2
        with:
          tool: cross
        if: contains(matrix.target, '-musl')

      - run: echo "RUSTFLAGS=${RUSTFLAGS} -C target-feature=+crt-static" >> "${GITHUB_ENV}"
        if: endsWith(matrix.target, 'windows-msvc')

      - uses: taiki-e/upload-rust-binary-action@3962470d6e7f1993108411bc3f75a135ec67fc8c # v1
        with:
          bin: merge-warden
          target: ${{ matrix.target }}
          tar: unix
          zip: windows
          token: ${{ secrets.GITHUB_TOKEN }}
