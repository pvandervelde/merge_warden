# Workflow to prepare a release pull request
name: Prepare Release PR

on:
  push:
    branches:
      - master

permissions:
  contents: write # To push branches, commit changes
  pull-requests: write # To create/close PRs

jobs:
  prepare-release:
    name: Prepare Release PR
    runs-on: ubuntu-latest
    # Skip if the commit message indicates it's from merging a release PR
    if: ${{ !contains(github.event.head_commit.message, 'chore(release):') }}

    steps:
      - name: Generate GitHub App token
        id: app-token
        uses: actions/create-github-app-token@d72941d797fd3113feb6b93fd0dec494b13a2547 # v1
        with:
          app-id: ${{ secrets.RELEASE_APP_ID }}
          private-key: ${{ secrets.RELEASE_APP_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          # Fetch all history for version calculation and changelog generation
          fetch-depth: 0

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6 # v2

      - name: Install cargo binstall
        uses: cargo-bins/cargo-binstall@main

      - name: Install Conventional Commits Next Version
        run: cargo install conventional_commits_next_version

      - name: Install git-cliff
        run: cargo install git-cliff

      - name: Install cargo typos
        run: cargo install typos-cli

      - name: Configure Git user
        run: |
          git config user.name "releaser[bot]"
          git config user.email "releaser[bot]@users.noreply.github.com"

      - name: Calculate next version
        id: calc_version
        run: |
          # Use Conventional Commits Next Version to calculate the next version
          NEXT_VERSION=$(conventional_commits_next_version --from-commit-hash $(git rev-parse $(git describe --tags --abbrev=0)) --from-version $(git describe --tags --abbrev=0) --calculation-mode "Batch")
          echo "NEXT_VERSION=${NEXT_VERSION}" >> $GITHUB_OUTPUT
          echo "The next version is: ${NEXT_VERSION}"

      - name: Generate Changelog Section
        id: generate_changelog
        run: |
          NEXT_VERSION="${{ steps.calc_version.outputs.NEXT_VERSION }}"
          # Generate notes for the upcoming version
          # Use the tag format decided earlier (no 'v' prefix)
          git-cliff --tag "${NEXT_VERSION}" --unreleased --strip all > release_notes.md
          echo "Generated release notes for ${NEXT_VERSION}"
          # Check if notes were actually generated (might be empty if no relevant commits)
          if [ -s release_notes.md ]; then
            echo "has_notes=true" >> $GITHUB_OUTPUT
          else
            echo "No relevant commits found for changelog."
            echo "has_notes=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Node.js
        if: steps.generate_changelog.outputs.has_notes == 'true'
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: 20

      - name: Set up git remote to use app token
        if: steps.generate_changelog.outputs.has_notes == 'true'
        run: |
          git remote set-url origin "https://x-access-token:${{ steps.app-token.outputs.token }}@github.com/${{ github.repository }}.git"

      - name: Prepare release with verified commit and PR
        if: steps.generate_changelog.outputs.has_notes == 'true'
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          node .github/scripts/prepare-release.js "${{ steps.calc_version.outputs.NEXT_VERSION }}" release_notes.md
