schemaVersion = 1

# Define the pull request policies pertaining to the pull request title.
[policies.pullRequests.prTitle]
# Indicate if the pull request title should follow a specific format.
required = true

# The regular expression pattern that the pull request title must match. By default it follows the conventional commit
# specification.
# pattern = "^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test)(\\([a-z0-9_-]+\\))?!?: .+"

# Define the label that will be applied to the pull request if the title does not match the specified pattern.
# If the label is not specified, no label will be applied.
label_if_missing = "pr-issue: invalid-title-format"

[policies.pullRequests.workItem]
# Indicate if the pull request description should contain a work item reference.
required = true

# The regular expression pattern that the pull request description must match to reference a work item.
# By default, it matches issue references like `#123`, `GH-123`, or full URLs to GitHub issues.
# pattern = "(?i)(fixes|closes|resolves|references|relates to)\\s+(#\\d+|GH-\\d+|https://github\\.com/[^/]+/[^/]+/issues/\\d+|[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+#\\d+)"

# Define the label that will be applied to the pull request if it does not contain a work item reference.
# If the label is not specified, no label will be applied.
label_if_missing = "pr-issue: missing-work-item"

[policies.pullRequests.prSize]
# Enable PR size checking and labeling
enabled = false

# Fail the check for oversized PRs (XXL category - 500+ lines)
fail_on_oversized = false

# File patterns to exclude from size calculations (supports glob patterns)
excluded_file_patterns = ["*.md", "*.txt", "docs/*"]

# Prefix for size labels (will create labels like "size/XS", "size/S", etc.)
label_prefix = "size/"

# Add educational comments for oversized PRs
add_comment = true

# Optional: Custom size thresholds (uncomment to override defaults)
# [policies.pullRequests.prSize.thresholds]
# xs = 10    # 1-10 lines
# s = 50     # 11-50 lines
# m = 100    # 51-100 lines
# l = 250    # 101-250 lines
# xl = 500   # 251-500 lines
# xxl = 501+ lines (anything above xl)

# Configuration for smart change type label detection
[change_type_labels]
# Enable intelligent change type label detection
enabled = true

# Mappings from conventional commit types to repository-specific labels
[change_type_labels.conventional_commit_mappings]
# Feature-related label mappings (will look for these labels in the repository)
feat = ["enhancement", "feature", "new feature"]
# Bug fix-related label mappings
fix = ["bug", "bugfix", "fix"]
# Documentation-related label mappings
docs = ["documentation", "docs"]
# Style-related label mappings
style = ["style", "formatting"]
# Refactoring-related label mappings
refactor = ["refactor", "refactoring", "code quality"]
# Performance-related label mappings
perf = ["performance", "optimization"]
# Test-related label mappings
test = ["test", "tests", "testing"]
# Chore-related label mappings
chore = ["chore", "maintenance", "housekeeping"]
# CI-related label mappings
ci = ["ci", "continuous integration", "build"]
# Build-related label mappings
build = ["build", "dependencies"]
# Revert-related label mappings
revert = ["revert"]

# Settings for creating fallback labels when repository labels are not found
[change_type_labels.fallback_label_settings]
# Format for creating new label names (use {change_type} placeholder)
name_format = "type: {change_type}"
# Whether to create fallback labels if none are found
create_if_missing = true
# Colors for fallback labels (hex format)
[change_type_labels.fallback_label_settings.color_scheme]
feat = "#0075ca"     # Blue - features
fix = "#d73a4a"      # Red - bug fixes
docs = "#0052cc"     # Dark blue - documentation
style = "#f9d0c4"    # Light pink - formatting
refactor = "#fef2c0" # Light yellow - refactoring
perf = "#a2eeef"     # Light blue - performance
test = "#d4edda"     # Light green - testing
chore = "#e1e4e8"    # Light gray - maintenance
ci = "#fbca04"       # Yellow - CI/CD
build = "#c5def5"    # Light blue - build system
revert = "#b60205"   # Dark red - reverts

# Configuration for the label detection strategy
[change_type_labels.detection_strategy]
# Enable exact name matching (e.g., "feat", "fix")
exact_match = true
# Enable prefix matching (e.g., "type: feat", "kind: fix")
prefix_match = true
# Enable description matching (e.g., labels with "(type: feat)" in description)
description_match = true
# Common prefixes to check for prefix matching
common_prefixes = ["type:", "kind:", "category:"]
